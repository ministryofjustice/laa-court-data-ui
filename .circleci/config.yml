version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
  aws-ecr: circleci/aws-ecr@9.0.2
  browser-tools: circleci/browser-tools@1.4.6
  slack: circleci/slack@3.4.2
  snyk: snyk/snyk@2.2.0
  node: circleci/node@7.1.0

references:
  _restore-bundle: &restore-bundle
    restore_cache:
      keys:
        - v2-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - v2-bundle-

  _install-bundle: &install-bundle
    run:
      name: Install gems
      command: |
        bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
        gem install bundler -v $bundler_version
        bundle config set path 'vendor/bundle'
        bundle check || bundle install --jobs=4 --retry=3
        bundle clean --force

  _save-bundle: &save-bundle
    save_cache:
      key: v2-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      paths:
        - ~/.bundle
        - vendor/bundle

  _restore-assets: &restore-assets
    restore_cache:
      keys:
        - v4-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
        # fallback to using the latest asset cache if no exact match is found
        - v4-yarn-

  _install-assets: &install-assets
    run:
      name: Install and compile assets
      command: |
        RUBYOPT=-W:no-deprecated \
        yarn install && yarn build --progress --color

  _save-assets: &save-assets
    save_cache:
      key: v4-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - app/assets/builds

  _attach-tmp-workspace: &attach-tmp-workspace
    attach_workspace:
      at: ~/repo/tmp

  _main-only: &main-only
    filters:
      branches:
        only: main
# ------------------
# EXECUTORS
# ------------------
executors:
  test-executor:
    working_directory: ~/repo
    docker:
      - image: cimg/ruby:3.4.4-browsers
        environment:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:circleci@127.0.0.1:5432/laa_court_data_ui_test
          TZ: Europe/London
      - image: cimg/postgres:17.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "circleci"
          POSTGRES_DB: laa_court_data_ui_test

  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-assess-a-claim
          REPO_NAME: laa-court-data-ui

# ------------------
# COMMANDS
# ------------------
commands:
  install-gems:
    steps:
      - *restore-bundle
      - *install-bundle
      - *save-bundle

  install-compile-assets:
    steps:
      - *restore-assets
      - *install-assets
      - *save-assets

  restore-dependencies:
    steps:
      - *restore-bundle
      - *restore-assets

  build-base:
    steps:
      - node/install:
          install-yarn: true
          node-version: '20.19'
      - install-gems
      - install-compile-assets

  aws-cli-setup:
    steps:
     - aws-cli/setup:
        role_arn: $ECR_ROLE_TO_ASSUME
        region: $ECR_REGION

  db-setup:
    steps:
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: |
            RUBYOPT=-W:no-deprecated \
            bundle exec rails db:schema:load --trace

  rubocop:
    steps:
      - run:
          name: Run rubocop
          command: bundle exec rubocop

  linter:
    steps:
      - run:
          name: Run JS-lint
          command: yarn run validate:js
      - run:
          name: Run Stylelint
          command: yarn run validate:scss
      - run:
          name: Run Haml-Lint
          command: bundle exec haml-lint app

  brakeman:
    steps:
      - run:
          name: Run brakeman
          command: bundle exec brakeman -w2 # -w2 is to ignore warnings. Remove after update to Rails 7.2

  build-temp-image:
    steps:
      - run:
          name: Compile Docker Image
          command: |
            docker build \
              --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
              --build-arg COMMIT_ID=${CIRCLE_SHA1} \
              --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
              --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
              --pull \
              --tag vcd:scan \
              --file docker/Dockerfile .

  rspec:
    steps:
      - db-setup
      - run:
          name: Run rspec tests
          command: |
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            RUBYOPT=-W:no-deprecated \
            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              -- $TESTFILES
      - store_test_results:
          path: /tmp/test-results/rspec
      - run:
          name: Stash coverage results
          command: |
            mkdir coverage_results
            cp -R coverage/.resultset.json coverage_results/.resultset-${CIRCLE_NODE_INDEX}.json
      - persist_to_workspace:
          root: .
          paths:
            - coverage_results
      - store_artifacts:
          path: ~/repo/coverage_results

  deploy-to-environment:
      description: Deploy image to the specified environment
      parameters:
        environment:
          description: Name of environment to deploy to
          type: string
        registry:
          description: Location of ECR images
          type: string
          default: 754256621582.dkr.ecr.${ECR_REGION}.amazonaws.com
      steps:
        - aws-cli/setup:
            role_arn: $ECR_ROLE_TO_ASSUME
            region: $ECR_REGION
        - checkout
        - run:
            name: Authenticate K8s
            command: |
                echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
                kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_CLUSTER_URL}
                kubectl config set-credentials circleci --token=${K8S_TOKEN}
                kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
                kubectl config use-context ${K8S_CLUSTER_NAME}
                kubectl --namespace=${K8S_NAMESPACE} get pods
        - run:
            name: Deploy to << parameters.environment >>
            command: |
              .circleci/deploy.sh << parameters.environment >>

# ------------------
# JOBS
# ------------------
jobs:
  build-test-container:
    executor: test-executor
    steps:
      - checkout
      - build-base

  linter-tests:
    executor: test-executor
    parallelism: 1
    steps:
      - checkout
      - install-gems
      - install-compile-assets
      - linter
      - rubocop
      - brakeman

  rspec-tests:
    executor: test-executor
    parallelism: 4
    steps:
      - checkout
      - install-gems
      - install-compile-assets
      - *attach-tmp-workspace
      - run: sudo apt-get update
      - browser-tools/install-chrome
      - run: sudo apt autoremove
      - save_cache:
          name: Saving assets and dependencies cache for use in later steps
          key: vcd-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/repo
      - rspec

  coverage:
    executor: test-executor
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          name: Restoring assets and dependencies cache from tests
          key: vcd-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Process coverage
          command: |
            bundle exec rake simplecov:process_coverage
      - store_artifacts:
          path: ~/repo/coverage
          destination: coverage

  scan-docker-image:
    parameters:
      monitor:
        type: boolean
        default: false
    executor: test-executor
    parallelism: 1
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - build-temp-image
      - snyk/scan:
          token-variable: SNYK_TOKEN
          docker-image-name: vcd:scan
          target-file: ./docker/Dockerfile
          organization: "legal-aid-agency"
          severity-threshold: "critical"
          fail-on-issues: true
          no-output-timeout: 20m
          monitor-on-build: << parameters.monitor >>

  build-app-container:
    executor: aws-ecr/default
    steps:
      - checkout
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - run:
          name: Login to ECR
          command: |
            aws ecr get-login-password --region $ECR_REGION | docker login \
            --username AWS --password-stdin \
            754256621582.dkr.ecr.${ECR_REGION}.amazonaws.com
      - run:
          name: Set ECR_TAGS environment variable for use in next step
          command: |
            [[ "$CIRCLE_BRANCH" == "main" ]] && ECR_TAGS="main-$CIRCLE_SHA1,latest" || ECR_TAGS="branch-$CIRCLE_SHA1"
            echo "export ECR_TAGS=$ECR_TAGS" >> "$BASH_ENV"
            echo "export APP_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z)"  >> "$BASH_ENV"
            source "$BASH_ENV"
      - aws-ecr/build_image:
          push_image: true
          tag: ${ECR_TAGS}
          region: $ECR_REGION
          repo: laa-assess-a-claim/laa-court-data-ui
          account_id: "754256621582"
          dockerfile: "docker/Dockerfile"
          extra_build_args: >-
            --build-arg BUILD_DATE=${APP_BUILD_DATE}
            --build-arg BUILD_TAG=${CIRCLE_SHA1}
            --build-arg COMMIT_ID=${CIRCLE_SHA1}
            --build-arg APP_BRANCH=${CIRCLE_BRANCH}

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy-to-environment:
          environment: dev

  deploy-test:
    executor: cloud-platform-executor
    steps:
      - deploy-to-environment:
          environment: test

  deploy-uat:
    executor: cloud-platform-executor
    steps:
      - deploy-to-environment:
          environment: uat

  deploy-production:
    executor: cloud-platform-executor
    steps:
      - deploy-to-environment:
          environment: production

# ------------------
# WORKFLOWS
# ------------------
workflows:
  version: 2
  build-deploy-main:
    jobs:
      - build-app-container:
          <<: *main-only
      - scan-docker-image:
          monitor: true
          requires:
            - build-app-container
      - deploy-dev:
          context: laa-court-data-ui-live-dev
          requires:
            - build-app-container
      - hold-test:
          type: approval
          requires:
            - build-app-container
      - deploy-test:
          context: laa-court-data-ui-live-test
          requires:
            - hold-test
      - hold-uat:
          type: approval
          requires:
            - build-app-container
      - deploy-uat:
          context: laa-court-data-ui-live-uat
          requires:
            - hold-uat
      - hold-production:
          type: approval
          requires:
            - build-app-container
      - deploy-production:
          context: laa-court-data-ui-live-production
          requires:
            - hold-production

  test-branch:
    jobs:
      - build-test-container:
          filters:
            branches:
              ignore:
                - main
      - linter-tests:
          requires:
            - build-test-container
      - rspec-tests:
          requires:
            - build-test-container
      - coverage:
          requires:
            - rspec-tests
      - scan-docker-image:
          monitor: false
          requires:
            - build-test-container

  build-deploy-branch:
    jobs:
      - branch-build-approval:
          type: approval
          filters:
            branches:
              ignore:
                - main
      - build-app-container:
          requires:
            - branch-build-approval
      - deploy-dev:
          context: laa-court-data-ui-live-dev
          requires:
            - build-app-container
      - hold-test:
          type: approval
          requires:
            - build-app-container
      - deploy-test:
          context: laa-court-data-ui-live-test
          requires:
            - hold-test
      - hold-uat:
          type: approval
          requires:
            - build-app-container
      - deploy-uat:
          context: laa-court-data-ui-live-uat
          requires:
            - hold-uat
