version: 2.1

orbs:
  slack: cimg/slack@3.4.2
  snyk: snyk/snyk@1.1.1

references:
  _restore-bundle: &restore-bundle
    restore_cache:
      keys:
        - v4-bundle-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - v4-bundle-

  _install-bundle: &install-bundle
    run:
      name: Install gems
      command: |
        bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
        gem install bundler -v $bundler_version
        bundle config set path '~/vendor/bundle'
        bundle check || bundle install --jobs=4 --retry=3

  _save-bundle: &save-bundle
    save_cache:
      key: v3-bundle-{{ checksum "Gemfile.lock" }}
      paths:
        - ~/vendor/bundle

  _restore-assets: &restore-assets
    restore_cache:
      keys:
        - v4-yarn-{{ checksum "yarn.lock" }}
        # fallback to using the latest asset cache if no exact match is found
        - v4-yarn-

  _install-assets: &install-assets
    run:
      name: Install and compile assets
      command: |
        RUBYOPT=-W:no-deprecated \
        bundle exec rails assets:precompile

  _save-assets: &save-assets
    save_cache:
      key: v4-yarn-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - public/packs-test

  _attach-tmp-workspace: &attach-tmp-workspace
    attach_workspace:
      at: ~/repo/tmp

  _script-build-app-container: &script-build-app-container
    run:
        name: Build and push docker image
        command: |
          .circleci/build.sh

# ------------------
# EXECUTORS
# ------------------
executors:
  test-executor:
    working_directory: ~/repo
    docker:
      - image: cimg/ruby:2.7.2-node-browsers
        environment:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:circleci@127.0.0.1:5432/laa_court_data_ui_test
          TZ: Europe/London
      - image: cimg/postgres:11.6-alpine-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "circleci"
          POSTGRES_DB: laa_court_data_ui_test

  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools:1.23
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-get-paid
          REPO_NAME: laa-court-data-ui

# ------------------
# COMMANDS
# ------------------
commands:
  install-gems:
    steps:
      - *restore-bundle
      - *install-bundle
      - *save-bundle

  install-compile-assets:
    steps:
      - *restore-assets
      - *install-assets
      - *save-assets

  build-base:
    steps:
      - install-gems
      - install-compile-assets
      - install-codeclimate-tt

  db-setup:
    steps:
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: |
            RUBYOPT=-W:no-deprecated \
            bundle exec rails db:schema:load --trace

  rubocop:
    steps:
      - run:
          name: Run rubocop
          command: bundle exec rubocop

  linter:
    steps:
      - run:
          name: Run JS-lint
          command: yarn run validate:js
      - run:
          name: Run Stylelint
          command: yarn run validate:scss

  brakeman:
    steps:
      - run:
          name: Run brakeman
          command: bundle exec brakeman

  build-temp-image:
    steps:
      - run:
          name: Compile Docker Image
          command: |
                docker build \
                  --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
                  --build-arg COMMIT_ID=${CIRCLE_SHA1} \
                  --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
                  --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
                  --pull \
                  --tag vcd:scan \
                  --file docker/Dockerfile .

  rspec:
    steps:
      - db-setup
      - run:
          name: Run rspec tests
          command: |
                mkdir /tmp/test-results
                tmp/cc-test-reporter before-build
                TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split)
                RUBYOPT=-W:no-deprecated \
                bundle exec rspec \
                  --format progress \
                  --format RspecJunitFormatter \
                  --out /tmp/test-results/rspec.xml \
                  $TESTFILES
                tmp/cc-test-reporter format-coverage -t simplecov -o "tmp/coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  upload-coverage:
    steps:
      - run:
          name: Upload coverage results to Code Climate
          command: |
            tmp/cc-test-reporter sum-coverage --output - --parts 1 tmp/coverage/codeclimate.*.json | tmp/cc-test-reporter upload-coverage --input -

  install-codeclimate-tt:
    steps:
      - run:
          name: Install codeclimate test reporter
          command: |
            mkdir -p tmp/
            mkdir -p tmp/coverage/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > tmp/cc-test-reporter
            chmod +x tmp/cc-test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter

  deploy-to:
    description: >
      Deploy image to the specified environment
    parameters:
      environment:
        description: destination environment
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: deploying to << parameters.environment >>
          command: |
            .circleci/deploy.sh << parameters.environment >>
      - slack/status:
          success_message: ":tada: deploy of <$CIRCLE_BUILD_URL|$CIRCLE_BRANCH> to << parameters.environment >> successful!"
          failure_message: ":red_circle: deploy of <$CIRCLE_BUILD_URL|$CIRCLE_BRANCH> to << parameters.environment >> failed!"

# ------------------
# JOBS
# ------------------
jobs:
  build-test-container:
    executor: test-executor
    steps:
      - checkout
      - build-base

  linter-tests:
    executor: test-executor
    parallelism: 1
    steps:
      - checkout
      - build-base
      - linter
      - rubocop
      - brakeman

  rspec-tests:
    executor: test-executor
    parallelism: 1
    steps:
      - checkout
      - build-base
      - *attach-tmp-workspace
      - rspec
      - persist_to_workspace:
          root: tmp
          paths:
            - coverage/codeclimate.*.json
      - store_artifacts:
          path: tmp/coverage
      - upload-coverage

  scan-docker-image:
    executor: test-executor
    parallelism: 1
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - build-base
      - build-temp-image
      - snyk/scan:
          token-variable: SNYK_TOKEN
          docker-image-name: vcd:scan
          target-file: ./docker/Dockerfile
          organization: 'legal-aid-agency'
          severity-threshold: "high"
          fail-on-issues: true

  build-app-container:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - *script-build-app-container

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: dev

  deploy-staging:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: staging

  deploy-uat:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: uat

  deploy-production:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: production

# ------------------
# WORKFLOWS
# ------------------
workflows:
  version: 2
  test-build-deploy-master:
    jobs:
      - build-test-container:
          filters:
            branches:
              only:
                - master
      - linter-tests:
          requires:
            - build-test-container
      - rspec-tests:
          requires:
            - build-test-container
      - build-app-container:
          requires:
            - linter-tests
            - rspec-tests
      - deploy-dev:
          requires:
            - build-app-container
      - hold-staging:
          type: approval
          requires:
            - build-app-container
      - deploy-staging:
          requires:
            - hold-staging
      - hold-uat:
          type: approval
          requires:
            - build-app-container
      - deploy-uat:
          requires:
            - hold-uat
      - hold-production:
          type: approval
          requires:
            - build-app-container
      - deploy-production:
          requires:
            - hold-production

  test-branch:
    jobs:
      - build-test-container:
          filters:
            branches:
              ignore:
                - master
      - linter-tests:
          requires:
            - build-test-container
      - rspec-tests:
          requires:
            - build-test-container
      - scan-docker-image:
          requires:
            - build-test-container

  build-deploy-branch:
    jobs:
      - branch-build-approval:
          type: approval
          filters:
            branches:
              ignore:
                - master
      - build-app-container:
          requires:
            - branch-build-approval
      - hold-dev:
          type: approval
          requires:
            - build-app-container
      - deploy-dev:
          requires:
            - hold-dev
      - hold-staging:
          type: approval
          requires:
            - build-app-container
      - deploy-staging:
          requires:
            - hold-staging
      - hold-uat:
          type: approval
          requires:
            - build-app-container
      - deploy-uat:
          requires:
            - hold-uat
